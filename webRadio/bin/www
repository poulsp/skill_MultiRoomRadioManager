#!/usr/bin/env node




/**
 * Module dependencies.
 */


process.env.NODE_ENV = 'development';

// uncomment below line to test this code against staging environment
//process.env.NODE_ENV = 'production';

// config variables
const config = require('../config/config.js');

//console.log(global.gConfig)

var app = require('../app');
//var debug = require('debug')('aliceSite:server');
var debug = require('debug')(`${global.gConfig.app_name}:server`);
var http = require('http');

//console.log(debug)

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');
var port = normalizePort(process.env.PORT || global.gConfig.node_port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Graceful Shutdown.
 */
const GracefulShutdownManager = require('@moebius/http-graceful-shutdown').GracefulShutdownManager;
const shutdownManager = new GracefulShutdownManager(server);

let reEntrance = false
function sendStop2RadioManager() {
  if (reEntrance == true) {
    return
  }

  reEntrance =true
  // _RADIOMANAGER_WIDGET_REFRESH = 'psp/radiomanager/widget/refresh'
  require('../helpers/myHelper.js').send2RadioManagerWidget('psp/radiomanager/widget/refresh', 'HTTP server closing.')
}

process.on('SIGINT', () => {
  sendStop2RadioManager()
  shutdownManager.terminate(() => {
    console.log('\nHTTP server closed.')
  })
})

process.on('SIGTERM', () => {
  sendStop2RadioManager()
  shutdownManager.terminate(() => {
    console.log('\nHTTP server closed')
  })
})
